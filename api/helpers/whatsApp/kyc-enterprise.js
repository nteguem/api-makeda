const { sendMessageToNumber } = require('./whatsappMessaging');
const {Steps} = require("../utils");

// Objet pour stocker l'√©tape actuelle et les r√©ponses de l'utilisateur
let userData = {
  step: 1,
  answers: {} // Un objet vide pour stocker les r√©ponses
};
// Fonction pour g√©rer les commandes de l'utilisateur
const kycEnterpriseCommander = async (user, msg, client,service) => {
  try {
    const userInput = msg.body.trim(); // Entr√©e de l'utilisateur sans espaces vides
    userData.answers["service"] = service;
    userData.answers["accountType"] = "personne_morale";
    if (userInput === "*") {
      // Revenir √† l'√©tape pr√©c√©dente
      userData.step = Math.max(userData.step - 1, 1); // Ne pas descendre en dessous de l'√©tape 1
    }
    else {
      // Logique de gestion des √©tapes du formulaire KYC
      switch (userData.step) {
        case 1:
          userData.answers["socialName"] = userInput;
          userData.step++;
          break;
        case 2:
        // Logique pour joindre une copie des statuts
          userData.answers["statutesCopyFile"] = userInput;
          userData.step++;
          break;
        case 3:
          // Logique pour saisir le pays d'incorporation ou de r√©sidence
          userData.answers["incorporationCountry"] = userInput;
          userData.step++;
          break;
        case 4:
          // Logique pour saisir le num√©ro du registre de commerce
          userData.answers["commerceRegistryNumber"] = userInput;
          userData.step++;
          break;
        case 5:
          // Logique pour joindre une copie du RCCM
          userData.answers["RCCMFile"] = userInput;
          userData.step++;
          break;
        case 6:
          // Logique pour saisir la date de cr√©ation de l'entreprise
          userData.answers["incorporationDate"] = userInput;
          userData.step++;
          break;
        case 7:
          // Logique pour saisir l'adresse email de l'entreprise
          userData.answers["email"] = userInput;
          userData.step++;
          break;
        case 8:
          // Logique pour saisir le num√©ro de t√©l√©phone de l'entreprise
          userData.answers["phoneNumber"] = userInput;
          userData.step++;
          break;
        case 9:
          // Logique pour saisir le nom et pr√©nom du repr√©sentant l√©gal
          userData.answers["fullName"] = userInput;
          userData.step++;
          break;
        case 10:
          // Logique pour s√©lectionner le type de repr√©sentant l√©gal
          if (userInput.toUpperCase() === "A" || userInput.toUpperCase() === "B" || userInput.toUpperCase() === "C") {
            userData.answers["legalRepresentative"] = userInput.toUpperCase() === "A" ? "Monsieur" : (userInput.toUpperCase() === "B" ? "Madame" : "Autre");
            userData.step++;
          } else {
            msg.reply("Veuillez choisir A, B ou C.");
          }
          break;
        case 11:
          // Logique pour saisir le r√¥le du repr√©sentant l√©gal
          userData.answers["actingAs"] = userInput;
          userData.step++;
          break;
        case 12:
          // Logique pour saisir l'adresse compl√®te de l'entreprise
          userData.answers["address"] = userInput;
          userData.step++;
          break;
        case 13:
          // Logique pour r√©pondre √† la question sur les enqu√™tes
          if (userInput.toUpperCase() === "A" || userInput.toUpperCase() === "B") {
            if (userInput.toUpperCase() === "A") {
                msg.reply("Veuillez expliquer et inclure toutes les enqu√™tes en cours");
              } 
              else if (userInput.toUpperCase().startsWith("A-")) {
                userData.answers["investigationHistory"] = userInput;
                userData.step++;
              }
              else {
            userData.answers["investigationHistory"] = userInput.toUpperCase() === "A" ? "Oui" : "Non";
            userData.step++;
              }
          } else {
            msg.reply("Veuillez choisir A ou B.");
          }
          break;
        case 14:
        if (userInput.toUpperCase() === "A" || userInput.toUpperCase() === "B" || userInput.toUpperCase() === "C"|| userInput.toUpperCase() === "D" || userInput.toUpperCase() === "E") {
            userData.answers["investmentObjective"] = userInput.toUpperCase() === "A" ? 'Diversification du patrimoine' : 
            userInput.toUpperCase() === "B" ? 'Revenus compl√©mentaires' : 
            userInput.toUpperCase() === "C" ? "Transmission du patrimoine" : 
            userInput.toUpperCase() === "D" ? "Rendement" : "Autres";
            userData.step++;
        } else {
            msg.reply("Veuillez choisir A, B C , D ou E.");
        }
        break;
        case 15:
            if (userInput.toUpperCase() === "A" || userInput.toUpperCase() === "B" || userInput.toUpperCase() === "C") {
                userData.answers["investmentHorizon"] = userInput.toUpperCase() === "A" ? "Court-terme (moins de 2 ans)" : (userInput.toUpperCase() === "B" ? "Moyen-terme (2-5 ans)" : "Long-terme (Plus de 5 ans)");
                userData.step++;
              } else {
                msg.reply("Veuillez choisir A, B ou C.");
              }
              break; 
        case 16:
            if (userInput.toUpperCase() === "A" || userInput.toUpperCase() === "B" || userInput.toUpperCase() === "C") {
                userData.answers["riskLevel"] = userInput.toUpperCase() === "A" ? "Faible" : (userInput.toUpperCase() === "B" ? "Moyen" : "√âlev√©");
                userData.step++;
              } else {
                msg.reply("Veuillez choisir A, B ou C.");
              }
              break; 
        case 17:
            if (userInput.toUpperCase() === "A" || userInput.toUpperCase() === "B") {
                if (userInput.toUpperCase() === "A") {
                  // Si l'utilisateur choisit l'option A (Oui), demandez le nombre d'ann√©es d'exp√©rience
                  msg.reply("Veuillez fournir le nombre d'ann√©es d'exp√©rience sur ce format A-[nombre d'ann√©e] (eg: A-10)");
                } else {
                  // Si l'utilisateur choisit une autre option, enregistrez simplement la r√©ponse
                  userData.answers["financialMarketExperience"] = userInput.toUpperCase() === "A" ? "Oui" : "Non";
                  userData.step++;
                }
              } else if (userInput.toUpperCase().startsWith("A-")) {
                // Si l'utilisateur saisit le nombre d'ann√©es d'exp√©rience dans le format sp√©cifi√© (A-[nombre d'ann√©e])
                const experienceYears = userInput.slice(2).trim();
                userData.answers["financialMarketExperience"] = `Oui - ${experienceYears} ann√©e(s)`;
                userData.step++;
              } else {
                msg.reply("Veuillez choisir A ou B.");
              }
              break;
        case 18:
            userData.answers["financialSituationLastThreeYears"] = userInput;
            userData.step++;
            break;
        case 19:
        userData.answers["mainActivity"] = userInput;
        userData.step++;
        break;
        case 20:
        userData.answers["secondaryActivity"] = userInput;
        userData.step++;
        break;
        case 21:
        userData.answers["receivesSubsidies"] = userInput;
        userData.step++;
        break;
        case 22:
        userData.answers["bankDomiciliation"] = userInput;
        userData.step++;
        break;
        case 23:
        userData.answers["ribFile"] = userInput;
        userData.step++;
        break;
        case 24:
        userData.answers["taxNumberCertificateFile"] = userInput;
        userData.step++;
        break;
        default:
          msg.reply("√âtape inconnue.");
          break;
      }
    }

    // Envoyer le message correspondant √† l'√©tape actuelle
    const currentStepMessage = getCurrentStepMessage(userData.step);
    if (currentStepMessage) {
      await sendMessageToNumber(client, user.data.phoneNumber, `√©ùóçùñ∫ùóâùñæ ${userData.step}/24\n\n${currentStepMessage}\n\nùñ≥ùñ∫ùóâùñæùóì * ùóâùóàùóéùóã ùóãùñæùóèùñæùóáùóÇùóã ùñæùóá ùñ∫ùóãùóãùóÇ√®ùóãùñæ, # ùóâùóàùóéùóã ùóãùñæùóèùñæùóáùóÇùóã ùñ∫ùóé ùóÜùñæùóáùóé ùóâùóãùóÇùóáùñºùóÇùóâùñ∫ùóÖ.`);
    }

  } catch (error) {
    // Gestion des erreurs
    console.log("error",error)
    msg.reply(`Une erreur interne du serveur s'est produite suite √† une action de l'utilisateur : ${user.data.pseudo}. Notre √©quipe y travaille.\n\nVeuillez taper # pour soumettre le formulaire ou * pour revenir en arri√®re.`);
  }
};

// Fonction pour obtenir le message de l'√©tape actuelle
const getCurrentStepMessage = (step) => {
  switch (step) {
    case 2:
      return "Veuillez saisir la D√©nomination sociale en charge de l'investissement.";
    case 3:
      return "Veuillez joindre une copie des statuts";
    case 4:
      return "Veuillez saisir le pays d'incorporation ou de r√©sidence";
    case 5:
      return "Veuillez saisir le num√©ro du registre de commerce.";
    case 6:
      return "Veuillez joindre une copie du RCCM";
    case 7:
      return "Veuillez saisir la date de cr√©ation de l'entreprise (eg:_12/12/1990_).";
    case 8:
      return "Veuillez saisir l'adresse email.";
    case 9:
      return "Veuillez saisir le num√©ro de t√©l√©phone (eg:_(+237)697874621_).";
    case 10:
      return "Veuillez saisir le Nom et Pr√©nom";
    case 11:
        return "*Repr√©sentant l√©gal* : \n A-Monsieur ,\n B-Madame ,\n C-Autre ,\n"  
    case 12:
      return `*Agissant en qualit√© de* (‚ö†_D√ªment habilit√©(e)s_): \n\n Veuillez saisir votre r√¥le`;
    case 13:
      return "Veuillez saisir l'adresse complete (eg:_Avenue du G√©n√©ral de Gaulle, Quartier Bonapriso, B.P. 12345, Douala, Littoral, Cameroun_).";
        case 14:
      return "*Votre organisation ou l'un de ses propri√©taires, administrateurs, dirigeants ou employ√©s ont-ils fait l'objet d'enqu√™tes, de condamnations, d'exclusions ou de suspensions professionnelles li√©es √† la corruption, √† la fraude, au blanchiment d'argent, aux sanctions, au contr√¥le des exportations, √† l'esclavage moderne ou √† des infractions connexes ?* : \n A-Oui ,\n B-Non";
        case 15:
      return "*quel objectif r√©pond le placement envisag√© ?* : \n A-Diversification du patrimoine ,\n B-Revenus compl√©mentaires ,\n C-Transmission du patrimoine ,\n D-Rendement ,\n E-Autres";
        case 16:
      return "*Horizon de placement* : \n A-Court-terme (moins de 2 ans),\n B-Moyen-terme (2-5 ans),\n C-Long-terme (Plus de 5 ans).";
    case 17:
      return "*Quel est votre niveau de risque* : \n A-Faible ,\n B-Moyenne ,\n C-√âlev√©e.";
        case 18:
      return "*Avez-vous une exp√©rience professionnelle vous permettant d‚Äôacqu√©rir une bonne connaissance des march√©s financiers ?* :\n A-Oui,\n B-Non \n *NB*: si Oui veuillez fournir le nombre d'ann√©e d'exp√©rience sur ce format A-[nombre d'ann√©e] (eg:A-10)";
        case 19:
      return "D√©crivez en une phrase votre situation financi√®re durant les trois (03) derni√®res ann√©es.";
    case 20:
      return "D√©crivez votre activit√© principale";
    case 21:
      return "D√©crivez votre activit√© secondaire";
    case 22:
      return "L'entreprise b√©n√©ficie-t-elle parfois √† des subventions priv√©es ou d'√âtat?";
    case 23:
      return "Veuillez saisir le nom de votre banque partenaire et domiciliation";
    case 24:
      return "Veuillez joindre le Relev√© RIB";
    case 25:
      return "Veuillez joindre l'attestation Num√©ro Fiscal";
    default:
      return null;
  }
};
module.exports = {
  kycEnterpriseCommander,
};